# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Nurol CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 17
      uses: actions/setup-java@v2
      with:
        java-version: '17'
        distribution: 'adopt'
        server-id: docker.io
        server-username: MAVEN_USERNAME
        server-password: MAVEN_PASSWORD        

    - name: Building and Pushing employee-service
      run: mvn package -DskipTests dockerfile:push --file employee-service/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push department-service
      run: mvn package -DskipTests dockerfile:push --file department-service/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push config-server
      run: mvn package -DskipTests dockerfile:push --file config-server/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push api-gateway
      run: mvn package -DskipTests dockerfile:push --file api-gateway/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and Push service-registry
      run: mvn package -DskipTests dockerfile:push --file service-registry/pom.xml
      env:
          MAVEN_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

  Deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install kubectl
      run: |
        curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
        chmod +x ./kubectl
        sudo mv ./kubectl /usr/local/bin/kubectl

    - name: Authenticate with EKS cluster
      run: aws eks --region eu-north-1 update-kubeconfig --name nurol-cluster

    - name: Deploy to Amazon EKS
      run: kubectl apply -f k8s/
      working-directory: ${{ github.workspace }}
